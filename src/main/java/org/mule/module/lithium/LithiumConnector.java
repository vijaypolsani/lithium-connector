/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.module.lithium;

import java.io.IOException;

import javax.ws.rs.core.MultivaluedMap;

import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Connect;
import org.mule.api.annotations.ValidateConnection;
import org.mule.api.annotations.ConnectionIdentifier;
import org.mule.api.annotations.Disconnect;
import org.mule.api.annotations.param.ConnectionKey;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.param.Optional;
import org.mule.api.annotations.rest.RestCall;
import org.mule.api.annotations.rest.RestQueryParam;
import org.mule.api.annotations.rest.RestUriParam;
import org.mule.api.annotations.rest.RestExceptionOn;
import org.mule.api.ConnectionException;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Processor;
import static com.lithium.integrations.constants.QueryParameterConstants.*;

import com.lithium.integrations.LithiumSessionRestClient;
import com.sun.jersey.core.util.MultivaluedMapImpl;

/**
 * Cloud Connector
 * 
 * @author MuleSoft, Inc.
 */
@Connector(name = "Lithium", schemaVersion = "1.0.0", friendlyName = "Lithium", minMuleVersion = "3.4")
public abstract class LithiumConnector {

	private final MultivaluedMap<String, String> queryParams = new MultivaluedMapImpl();

	public MultivaluedMap<String, String> getQueryParams() {
		return queryParams;
	}

	/**
	 * Configurable
	 */
	@Configurable
	@Optional
	@Default("ldn.qa.lithium.com")
	private String communityHostname = "ldn.qa.lithium.com";

	public String getCommunityHostname() {
		return communityHostname;
	}

	public void setCommunityHostname(String communityHostname) {
		this.communityHostname = communityHostname;
	}

	/**
	 * Configurable
	 */
	@Configurable
	@Optional
	@Default("")
	private String communityName = "";

	public String getCommunityName() {
		return communityName;
	}

	public void setCommunityName(String communityName) {
		this.communityName = communityName;
	}

	/**
	 * Configurable
	 */
	@Configurable
	@Optional
	private String restApiSessionKey;

	public String getRestApiSessionKey() {
		return restApiSessionKey;
	}

	/**
	 * Set property
	 * 
	 * @param restApiSessionKey
	 *            The session key used for Lithium connectivity
	 */
	public void setRestApiSessionKey(String restApiSessionKey) {
		this.restApiSessionKey = restApiSessionKey;
	}

	private String username;

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	private String password;

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public void populateSessionKey() {
		MultivaluedMap<String, String> adminQueryParams = new MultivaluedMapImpl();
		adminQueryParams.add(LOGIN_USER_NAME_PARAM, getUsername());
		adminQueryParams.add(LOGIN_PASSWORD_PARAM, getPassword());
		// Null implies login.
		setRestApiSessionKey(LithiumSessionRestClient.invokeToGetRestSessionKey(null, adminQueryParams));
		queryParams.add(RESTAPI_SESSION_KEY, getRestApiSessionKey());
		System.out.println("Connected with User/Password " + username + " / " + password + " SessionKey: "
				+ getRestApiSessionKey());

	}

	/**
	 * Connect
	 * 
	 * @param username
	 *            A username
	 * @param password
	 *            A password
	 * @throws ConnectionException
	 */
	@Connect
	public void connect(@ConnectionKey String username, String password) throws ConnectionException {
		setUsername(username);
		setPassword(password);
		System.out.println("In Connect: " + getRestApiSessionKey());
		populateSessionKey();
	}

	/**
	 * Disconnect
	 */
	@Disconnect
	public void disconnect() {
		/*
		 * CODE FOR CLOSING A CONNECTION GOES IN HERE
		 */
	}

	/**
	 * Are we connected
	 */
	@ValidateConnection
	public boolean isConnected() {
		return true;
	}

	/**
	 * Are we connected
	 */
	@ConnectionIdentifier
	public String connectionId() {
		return "001";
	}

	/**
	 * Custom processor for getting the latest message on the Board
	 * <p/>
	 * {@sample.xml ../../../doc/Lithium-connector.xml.sample Lithium:get-blog-latest}
	 * 
	 * @param boardIdOrBlogName A blog name to get latest from..
	 * @return Some string
	 * @throws java.io.IOException
	 *             throws the exception
	 */
	@Processor
	@RestCall(uri = ("http://ldn.qa.lithium.com/restapi/vc/blogs/id/{boardName}/messages/latest"), method = org.mule.api.annotations.rest.HttpMethod.GET, contentType = "application/json", exceptions = { @RestExceptionOn(expression = "#[message.inboundProperties['http.status'] != 200]") })
	public abstract String getBlogLatest(
			@RestUriParam(value = "boardName") @Optional @Default("scienceofsocial") String boardIdOrBlogName)
			throws IOException;

	/**
	 * Custom processor for posting a message in the blog
	 * <p/>
	 * {@sample.xml ../../../doc/Lithium-connector.xml.sample Lithium:post-blog-message}
	 * message.author passing is not needed. THe logged in user is enough. If any other author name is kept. It thows an exception.
	 * @param boardIdOrBlogName The name of the boardID that need to be used in Rest Call 	
	 * @param messageSubject Subject of the blog message 	
	 * @param messageTeaser Message Teasor for display 	
	 * @param messageBody Message Body to display 	
	 * @param tagAdd Tag addition 	
	 * @param labels Labels that can be added to the Blog	
	 * @param messageIsDraft Checking whether message is a blog? true/false?	
	 * @return Response string from the WebService Call
	 * @throws java.io.IOException throws the exception
	 */
	@Processor
	public String postBlogMessage(@Optional @Default("scienceofsocial") String boardIdOrBlogName,
			@Optional @Default("Test From Mule connector calling LDN.") String messageSubject,
			@Optional @Default("Welcome to Lithium Integrations") String messageTeaser,
			@Optional @Default("Mule Lithium best practices.") String messageBody,
			@Optional @Default("Stocks,News,Events") String tagAdd,
			@Optional @Default("FIRST,TEST,GOAL") String labels, @Optional @Default("false") String messageIsDraft)
			throws IOException {

		if (getQueryParams().get(RESTAPI_SESSION_KEY) == null)
			populateSessionKey();
		System.out.println("Initial Query RestAPISession_Key Param: " + getQueryParams().get(RESTAPI_SESSION_KEY));
		if (getCommunityName() == null)
			setCommunityName("");
		MultivaluedMap<String, String> queryParam = new MultivaluedMapImpl();
		String url = "http://" + getCommunityHostname() + "/" + getCommunityName() + "restapi/vc/blogs/id/"
				+ boardIdOrBlogName + "/messages/post";
		queryParam.putAll(getQueryParams());
		queryParam.add(MESSAGE_SUBJECT, messageSubject);
		queryParam.add(MESSAGE_TEASER, messageTeaser);
		queryParam.add(MESSAGE_BODY, messageBody);
		queryParam.add(MESSAGE_ADD, tagAdd);
		queryParam.add(LABEL_LABELS, labels);
		queryParam.add(MESSAGE_IS_DRAFT, messageIsDraft);

		String reponseData = LithiumSessionRestClient.invokeToGetRestSessionKey(url, queryParam);
		if (reponseData.startsWith("3")) {
			// retry with new session key;
			System.out.println("Invalid Session Key. Hence retry. ");
			populateSessionKey();
			reponseData = LithiumSessionRestClient.invokeToGetRestSessionKey(url, queryParam);
		}
		return reponseData;
	}

	/**
	 * Custom processor for Kudos Givers leaderboard
	 * <p/>
	 * {@sample.xml ../../../doc/Lithium-connector.xml.sample Lithium:get-kudos-leaderboard}
	 * message.author passing is not needed. THe logged in user is enough. If any other author name is kept. It thows an exception.
	 * @param boardIdOrBlogName The name of the boardID that need to be used in Rest Call 	
	 * @param maxAge Max age of the post for pull up	
	 * @param pageSize Max number of pages 	
	 * @return Response string from the WebService Call
	 * @throws java.io.IOException throws the exception
	 */
	@Processor
	public String getKudosLeaderboard(@Optional @Default("scienceofsocial") String boardIdOrBlogName,
			@Optional @Default("all") String maxAge, @Optional @Default("100") String pageSize) throws IOException {

		if (getQueryParams().get(RESTAPI_SESSION_KEY) == null)
			populateSessionKey();
		System.out.println("Initial Query RestAPISession_Key Param: " + getQueryParams().get(RESTAPI_SESSION_KEY));
		if (getCommunityName() == null)
			setCommunityName("");
		MultivaluedMap<String, String> queryParam = new MultivaluedMapImpl();
		String url = "http://" + getCommunityHostname() + "/" + getCommunityName() + "restapi/vc/blogs/id/"
				+ boardIdOrBlogName + "/kudos/givers/leaderboard";
		queryParam.putAll(getQueryParams());
		queryParam.add(MAX_AGE, maxAge);
		queryParam.add(PAGE_SIZE, pageSize);

		String reponseData = LithiumSessionRestClient.invokeToGetRestSessionKey(url, queryParam);
		if (reponseData.startsWith("3")) {
			// retry with new session key;
			System.out.println("Invalid Session Key. Hence retry. ");
			populateSessionKey();
			reponseData = LithiumSessionRestClient.invokeToGetRestSessionKey(url, queryParam);
		}
		return reponseData;
	}

	/**
	 * Custom processor for Get Recent Topics in a Board
	 * <p/>
	 * {@sample.xml ../../../doc/Lithium-connector.xml.sample Lithium:get-recent-topics}
	 * message.author passing is not needed. THe logged in user is enough. If any other author name is kept. It thows an exception.
	 * @param boardIdOrBlogName The name of the boardID that need to be used in Rest Call 	
	 * @param pageSize Max age of the post for pull up	
	 * @param page Max number of pages 	
	 * @return Response string from the WebService Call
	 * @throws java.io.IOException throws the exception
	 */
	@Processor
	public String getRecentTopics(@Optional @Default("scienceofsocial") String boardIdOrBlogName,
			@Optional @Default("100") String pageSize, @Optional @Default("1") String page) throws IOException {

		if (getQueryParams().get(RESTAPI_SESSION_KEY) == null)
			populateSessionKey();
		System.out.println("Initial Query RestAPISession_Key Param: " + getQueryParams().get(RESTAPI_SESSION_KEY));
		if (getCommunityName() == null)
			setCommunityName("");
		MultivaluedMap<String, String> queryParam = new MultivaluedMapImpl();
		String url = "http://" + getCommunityHostname() + "/" + getCommunityName() + "restapi/vc/blogs/id/"
				+ boardIdOrBlogName + "/topics/recent";
		queryParam.putAll(getQueryParams());
		queryParam.add(PAGE, page);
		queryParam.add(PAGE_SIZE, pageSize);

		String reponseData = LithiumSessionRestClient.invokeToGetRestSessionKey(url, queryParam);
		if (reponseData.startsWith("3")) {
			// retry with new session key;
			System.out.println("Invalid Session Key. Hence retry. ");
			populateSessionKey();
			reponseData = LithiumSessionRestClient.invokeToGetRestSessionKey(url, queryParam);
		}
		return reponseData;
	}
}
